string helper(TreeNode*root,unordered_map<string,int>&m,vector<TreeNode*>&res)
{
  if(root==NULL)
      return "#";
  string s=to_string(root->val)+','+helper(root->left,m,res)+','+helper(root->right,m,res);
    if(m[s]==1)
        res.push_back(root);
    m[s]++;
    return s;
}
class Solution {
public:
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        vector<TreeNode*>res;
        unordered_map<string,int>m;
        helper(root,m,res);
        return res;
    }
};
